// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simple.Repository;

#nullable disable

namespace CascadDeleteTest.Migrations
{
    [DbContext(typeof(SimpleDbContext))]
    [Migration("20220806032035_0806-1")]
    partial class _08061
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CascadDeleteTest.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CascadDeleteTest.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CascadDeleteTest.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("EFCoreMySqlConcurrencyTest.Models.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("EFCoreMySqlConcurrencyTest.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("EFCoreMySqlConcurrencyTest.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("BlogId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("CascadDeleteTest.Models.UserRole", b =>
                {
                    b.HasOne("CascadDeleteTest.Models.Role", "Role")
                        .WithOne("UserRole")
                        .HasForeignKey("CascadDeleteTest.Models.UserRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CascadDeleteTest.Models.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("CascadDeleteTest.Models.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCoreMySqlConcurrencyTest.Models.Blog", b =>
                {
                    b.HasOne("EFCoreMySqlConcurrencyTest.Models.Person", "Person")
                        .WithMany("Blogs")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EFCoreMySqlConcurrencyTest.Models.Post", b =>
                {
                    b.HasOne("EFCoreMySqlConcurrencyTest.Models.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("CascadDeleteTest.Models.Role", b =>
                {
                    b.Navigation("UserRole")
                        .IsRequired();
                });

            modelBuilder.Entity("CascadDeleteTest.Models.User", b =>
                {
                    b.Navigation("UserRole")
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreMySqlConcurrencyTest.Models.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("EFCoreMySqlConcurrencyTest.Models.Person", b =>
                {
                    b.Navigation("Blogs");
                });
#pragma warning restore 612, 618
        }
    }
}
